
################################################################################
#
# NOTICE ABOUT AUTOINCREMENT :
#
# We de not declare INTEGER primary key as AUTOINCREMENT to benefit from
# SQLite optimised rowId which is a unique id autogenerated already.
# See :
# - https://sqlite.org/autoinc.html
# - https://sqlite.org/lang_createtable.html#rowid
#
#
################################################################################


DROP_TABLE = DROP TABLE [VARCHAR]?

# gpkg_contents ################################################################
# CREATE TABLE IF NOT EXISTS gpkg_contents (
#   table_name TEXT NOT NULL PRIMARY KEY,
#   data_type TEXT NOT NULL,
#   identifier TEXT UNIQUE,
#   description TEXT DEFAULT '',
#   last_change DATETIME NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ','now')),
#   min_x DOUBLE,
#   min_y DOUBLE,
#   max_x DOUBLE,
#   max_y DOUBLE,
#   srs_id INTEGER,
#   CONSTRAINT fk_gc_r_srs_id FOREIGN KEY (srs_id) REFERENCES gpkg_spatial_ref_sys(srs_id)
# );
CONTENTS_EXIST = SELECT count(name) FROM sqlite_master WHERE type='table' AND name='gpkg_contents'
CONTENTS_ALL = SELECT table_name, data_type, identifier, description, last_change, min_x, min_y, max_x, max_y, srs_id FROM gpkg_contents ORDER BY identifier
# we add an order by to preserve some consistancy
CONTENTS_BY_TABLE_NAME = SELECT table_name, data_type, identifier, description, last_change, min_x, min_y, max_x, max_y, srs_id FROM gpkg_contents WHERE table_name = [VARCHAR]?
CONTENTS_CREATE = INSERT INTO gpkg_contents(table_name, data_type, identifier, description, last_change, min_x, min_y, max_x, max_y, srs_id) VALUES ([VARCHAR]?, [VARCHAR]?, [VARCHAR]?, [VARCHAR]?, [TIMESTAMP]?, [DOUBLE]?, [DOUBLE]?, [DOUBLE]?, [DOUBLE]?, [INTEGER]?)
CONTENTS_UPDATE = UPDATE gpkg_contents SET table_name = [VARCHAR]?, data_type = [VARCHAR]?, identifier = [VARCHAR]?, description = [VARCHAR]?, last_change = [TIMESTAMP]?, min_x = [DOUBLE]?, min_y = [DOUBLE]?, max_x = [DOUBLE]?, max_y = [DOUBLE]?, srs_id = [INTEGER]? WHERE table_name = [VARCHAR]?
CONTENTS_DELETE = DELETE FROM gpkg_contents WHERE table_name = [VARCHAR]?

# gpkg_spatial_ref_sys #########################################################
# CREATE TABLE IF NOT EXISTS gpkg_spatial_ref_sys (
#   srs_name TEXT NOT NULL,
#   srs_id INTEGER NOT NULL PRIMARY KEY,
#   organization TEXT NOT NULL,
#   organization_coordsys_id INTEGER NOT NULL,
#   definition  TEXT NOT NULL, -- WKT-1
#   description TEXT
#   definition_12_063 TEXT -- WKT-2
# );
SPATIAL_REF_BY_SRID = SELECT * FROM gpkg_spatial_ref_sys WHERE srs_id = [INTEGER]?
SPATIAL_REF_BY_ORGANIZATION = SELECT * FROM gpkg_spatial_ref_sys WHERE lower(organization) = lower([VARCHAR]?) AND organization_coordsys_id = [INTEGER]?
SPATIAL_REF_NEXT_SRID = SELECT max(srs_id) FROM gpkg_spatial_ref_sys WHERE srs_id >= 32768
SPATIAL_REF_CREATE = INSERT INTO gpkg_spatial_ref_sys(srs_name, srs_id, organization, organization_coordsys_id, definition, description) VALUES ([VARCHAR]?, [INTEGER]?, [VARCHAR]?, [INTEGER]?, [VARCHAR]?, [VARCHAR]?)
SPATIAL_REF_CREATE_EXT = INSERT INTO gpkg_spatial_ref_sys(srs_name, srs_id, organization, organization_coordsys_id, definition, description, definition_12_063) VALUES ([VARCHAR]?, [INTEGER]?, [VARCHAR]?, [INTEGER]?, [VARCHAR]?, [VARCHAR]?, [VARCHAR]?)
SPATIAL_REF_DELETE = DELETE FROM gpkg_spatial_ref_sys WHERE srs_id = [INTEGER]?

# gpkg_extensions ##############################################################
# CREATE TABLE IF NOT EXISTS gpkg_extensions (
#   table_name TEXT,
#   column_name TEXT,
#   extension_name TEXT NOT NULL,
#   definition TEXT NOT NULL,
#   scope TEXT NOT NULL,
#   CONSTRAINT ge_tce UNIQUE (table_name, column_name, extension_name)
# );
EXTENSION_BY_TABLE_AND_COLUMN = SELECT table_name, column_name, extension_name, definition, scope FROM gpkg_extensions WHERE table_name = [VARCHAR]? AND column_name = [VARCHAR]?
EXTENSION_CREATE = INSERT INTO gpkg_extensions(table_name, column_name, extension_name, definition, scope) VALUES ([VARCHAR]?, [VARCHAR]?, [VARCHAR]?, [VARCHAR]?, [VARCHAR]?)
EXTENSION_DELETE_BY_TABLE = DELETE FROM gpkg_extensions WHERE table_name = [VARCHAR]?

# gpkg_geometry_columns ########################################################
# CREATE TABLE IF NOT EXISTS gpkg_geometry_columns (
#   table_name TEXT NOT NULL,
#   column_name TEXT NOT NULL,
#   geometry_type_name TEXT NOT NULL,
#   srs_id INTEGER NOT NULL,
#   z TINYINT NOT NULL,
#   m TINYINT NOT NULL,
#   CONSTRAINT pk_geom_cols PRIMARY KEY (table_name, column_name),
#   CONSTRAINT uk_gc_table_name UNIQUE (table_name),
#   CONSTRAINT fk_gc_tn FOREIGN KEY (table_name) REFERENCES gpkg_contents(table_name),
#   CONSTRAINT fk_gc_srs FOREIGN KEY (srs_id) REFERENCES gpkg_spatial_ref_sys (srs_id)
# );
GEOMETRY_COLUMN_CREATE = INSERT INTO gpkg_geometry_columns(table_name, column_name, geometry_type_name, srs_id, z, m) VALUES ([VARCHAR]?, [VARCHAR]?, [VARCHAR]?, [INTEGER]?, [TINYINT]? [TINYINT]?)

# gpkg_tile_matrix_set #########################################################
# CREATE TABLE IF NOT EXISTS gpkg_tile_matrix_set (
#   table_name TEXT NOT NULL PRIMARY KEY,
#   srs_id INTEGER NOT NULL,
#   min_x DOUBLE NOT NULL,
#   min_y DOUBLE NOT NULL,
#   max_x DOUBLE NOT NULL,
#   max_y DOUBLE NOT NULL,
#   CONSTRAINT fk_gtms_table_name FOREIGN KEY (table_name) REFERENCES gpkg_contents(table_name),
#   CONSTRAINT fk_gtms_srs FOREIGN KEY (srs_id) REFERENCES gpkg_spatial_ref_sys (srs_id)
# );
TILE_MATRIX_SET_BY_TABLE = SELECT table_name, srs_id, min_x, min_y, max_x, max_y FROM gpkg_tile_matrix_set WHERE table_name = [VARCHAR]?
TILE_MATRIX_SET_CREATE = INSERT INTO gpkg_tile_matrix_set(table_name, srs_id, min_x, min_y, max_x, max_y) VALUES ([VARCHAR]?, [INTEGER]?, [DOUBLE]?, [DOUBLE]?, [DOUBLE]?, [DOUBLE]?)
TILE_MATRIX_SET_DELETE = DELETE FROM gpkg_tile_matrix_set WHERE table_name = [VARCHAR]?

# gpkg_tile_matrix #############################################################
# CREATE TABLE IF NOT EXISTS gpkg_tile_matrix (
#   table_name TEXT NOT NULL,
#   zoom_level INTEGER NOT NULL,
#   matrix_width INTEGER NOT NULL,
#   matrix_height INTEGER NOT NULL,
#   tile_width INTEGER NOT NULL,
#   tile_height INTEGER NOT NULL,
#   pixel_x_size DOUBLE NOT NULL,
#   pixel_y_size DOUBLE NOT NULL,
#   CONSTRAINT pk_ttm PRIMARY KEY (table_name, zoom_level),
#   CONSTRAINT fk_tmm_table_name FOREIGN KEY (table_name) REFERENCES gpkg_contents(table_name)
# );
TILE_MATRIX_BY_TABLE = SELECT table_name, zoom_level, matrix_width, matrix_height, tile_width, tile_height, pixel_x_size, pixel_y_size FROM gpkg_tile_matrix WHERE table_name = [VARCHAR]?
TILE_MATRIX_CREATE = INSERT INTO gpkg_tile_matrix(table_name, zoom_level, matrix_width, matrix_height, tile_width, tile_height, pixel_x_size, pixel_y_size) VALUES ([VARCHAR]?, [INTEGER]?, [INTEGER]?, [INTEGER]?, [INTEGER]?, [INTEGER]?, [DOUBLE]?, [DOUBLE]?)
TILE_MATRIX_DELETE = DELETE FROM gpkg_tile_matrix WHERE table_name = [VARCHAR]? AND zoom_level = [INTEGER]?
TILE_MATRIX_UPDATE_ZOOMLEVEL = UPDATE gpkg_tile_matrix SET zoom_level = [INTEGER]? WHERE table_name = [VARCHAR]? AND zoom_level = [INTEGER]?


################################################################################
# NOTE : AUTOINCREMENT REMOVED from id field, see header.
TILE_TABLE_CREATE = \
    CREATE TABLE [VARCHAR]? ( \
      id INTEGER PRIMARY KEY NOT NULL, \
      zoom_level INTEGER NOT NULL, \
      tile_column INTEGER NOT NULL, \
      tile_row INTEGER NOT NULL, \
      tile_data BLOB NOT NULL, \
      UNIQUE (zoom_level, tile_column, tile_row) \
    )
TILE_TABLE_DELETE = DROP TABLE [VARCHAR]?

TILE_CREATE = INSERT OR REPLACE INTO [VARCHAR]? (zoom_level, tile_column, tile_row, tile_data) VALUES ([INTEGER]?, [INTEGER]?, [INTEGER]?, [BLOB]? )
TILE_DELETE_BY_MATRIX = DELETE FROM [VARCHAR]? WHERE zoom_level=[INTEGER]?
TILE_DELETE = DELETE FROM [VARCHAR]? WHERE zoom_level=[INTEGER]? AND tile_column=[INTEGER]? AND tile_row=[INTEGER]?
TILE_DELETE_BY_RANGE = DELETE FROM [VARCHAR]? WHERE zoom_level=[INTEGER]? AND tile_column >= [INTEGER]? AND tile_column < [INTEGER]? AND tile_row >= [INTEGER]? AND tile_row < [INTEGER]?
TILE_ANY = SELECT id, zoom_level, tile_column, tile_row, tile_data FROM [VARCHAR]? WHERE zoom_level=[INTEGER]? LIMIT 1
TILE_GET = SELECT id, zoom_level, tile_column, tile_row, tile_data FROM [VARCHAR]? WHERE zoom_level=[INTEGER]? AND tile_column=[INTEGER]? AND tile_row=[INTEGER]?
TILE_EXIST = SELECT count(id) FROM [VARCHAR]? WHERE zoom_level=[INTEGER]? AND tile_column=[INTEGER]? AND tile_row=[INTEGER]?
TILE_UPDATE_ZOOMLEVEL = UPDATE [VARCHAR]? SET zoom_level = [INTEGER]? WHERE zoom_level = [INTEGER]?
TILE_IN_RANGE_SHORT = SELECT tile_column, tile_row FROM [VARCHAR]? WHERE zoom_level=[INTEGER]? AND tile_column >= [INTEGER]? AND tile_column < [INTEGER]? AND tile_row >= [INTEGER]? AND tile_row < [INTEGER]?
TILE_IN_RANGE = SELECT id, zoom_level, tile_column, tile_row, tile_data FROM [VARCHAR]? WHERE zoom_level=[INTEGER]? AND tile_column >= [INTEGER]? AND tile_column < [INTEGER]? AND tile_row >= [INTEGER]? AND tile_row < [INTEGER]?
