##################################################################################
#                                                                                #
#                    Logging configuration file for debugging                    #
#                                                                                #
#  This configuration file uses a finer logging level than the default setting   #
#  defined in the "$JAVA_HOME/conf/logging.properties" file. This configuration  #
#  can be enabled by adding the following argument when launching Java (replace  #
#  "$SIS_SOURCE" by the root directory of Apache SIS project and "/" by the      #
#  platform-specific path separator).                                            #
#                                                                                #
# -Djava.util.logging.config.file=$SIS_SOURCE/parent/logging.properties          #
#                                                                                #
##################################################################################

# Handlers installed during VM startup.
# These classes must be on the system module path.
handlers = java.util.logging.FileHandler, java.util.logging.ConsoleHandler

# Default global logging level.
.level = CONFIG

# Enable debugging information for Apache SIS packages.
org.apache.sis.level = FINER

# Set the message that are printed on the console to FINER and above.
# FINER provides debugging information normally hidden in production.
java.util.logging.ConsoleHandler.level = FINER

# MonolineFormatter is optional and specific to Apache SIS. Its default configuration does
# not show source class and method names.  The second line below configures that formatter
# for showing simple class names. That line can be commented-out if more compact output is
# desired. See MonolineFormatter class javadoc for more information about options.
java.util.logging.ConsoleHandler.formatter = org.apache.sis.util.logging.MonolineFormatter
org.apache.sis.util.logging.MonolineFormatter.source = class:short

# Copy the logs in a file in the working directory. Those logs contain time stamp
# together with source class and method names.  The file has unlimited length and
# is overwritten at each execution.
java.util.logging.FileHandler.pattern = java.log
java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter
